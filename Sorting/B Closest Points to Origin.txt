B Closest Points to Origin(Amazon Question)

Problem Description
We have a list A of points (x, y) on the plane. Find the B closest points to the origin (0, 0).

Here, the distance between two points on a plane is the Euclidean distance.

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)

NOTE: Euclidean distance between two points P1(x1, y1) and P2(x2, y2) is sqrt( (x1-x2)2 + (y1-y2)2 ).



Problem Constraints
1 <= B <= length of the list A <= 105
-105 <= A[i][0] <= 105
-105 <= A[i][1] <= 105



Input Format
The argument given is list A and an integer B.



Output Format
Return the B closest points to the origin (0, 0) in any order.



Example Input
Input 1:

 A = [ 
       [1, 3],
       [-2, 2] 
     ]
 B = 1
Input 2:

 A = [
       [1, -1],
       [2, -1]
     ] 
 B = 1


Example Output
Output 1:

 [ [-2, 2] ]
Output 2:

 [ [1, -1] ]


Example Explanation
Explanation 1:

 The Euclidean distance will be sqrt(10) for point [1,3] and sqrt(8) for point [-2,2].
 So one closest point will be [-2,2].
Explanation 2:

 The Euclidean distance will be sqrt(2) for point [1,-1] and sqrt(5) for point [2,-1].
 So one closest point will be [1,-1].
 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public class Solution {
    public int[][] solve(int[][] A, int B) {
        
        int N = A.length;
		// We will use custom comparator to sort the input  & then pick the first B elements as answer
        ArrayList<ArrayList<Integer>> lst = new ArrayList<>();
        for(int i=0; i<N; i++){
            ArrayList<Integer> temp = new ArrayList<>();
            temp.add(A[i][0]);
            temp.add(A[i][1]);
            lst.add(temp);
        }

        Collections.sort(lst, new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> A, ArrayList<Integer> B) {

                int x1 = A.get(0);
                int y1 = A.get(1);
                int x2 = B.get(0);
                int y2 = B.get(1);

                double val1 = (double) (Math.sqrt(x1*x1 + y1*y1));
                double val2 = (double) (Math.sqrt(x2*x2 + y2*y2));

                if(val1 < val2){
                    return -1;
                } else {
                    return 1;
                }
            }
        });

        int[][] ans = new int[B][2];

        for(int i=0; i<B; i++){
            ans[i][0] = lst.get(i).get(0);
            ans[i][1] = lst.get(i).get(1);
        }

        return ans;
    }
}
