Reverse pairs

Problem Description
Given an array of integers A, we call (i, j) an important reverse pair if i < j and A[i] > 2*A[j].
Return the number of important reverse pairs in the given array A.



Problem Constraints
1 <= length of the array <= 105

-2 * 109 <= A[i] <= 2 * 109



Input Format
The only argument given is the integer array A.



Output Format
Return the number of important reverse pairs in the given array A.



Example Input
Input 1:

 A = [1, 3, 2, 3, 1]
Input 2:

 A = [4, 1, 2]


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 There are two pairs which are important reverse pair 
 i.e  (1, 4) => A[1] > 2 * A[4] => 3 > 2 * 1 => 3 > 2 and
      (3, 4) => A[3] > 2 * A[4] => 3 > 2 * 1 => 3 > 2.
Explanation 2:

 There is only one pair 
 i.e (0, 1) => A[0] > 2 * A[1] => 4 > 2 * 1 => 4 > 1
 
 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public class Solution {

    long count = 0;
    long mod = 1000000007;
    /*
    We need to check for the condition just before merging the two sorted arrays
    And rembeber that we need to check for each element in A[i] and A[j]. check code for details
    */
    public int solve(int[] A) {

        int N = A.length;
        mergeSort(A, 0, N-1);
        
        return (int) count;
    }

    public void mergeSort(int[] arr, int s, int e){

        if(s==e){
            return;
        }

        int m = (s+e)/2;
        mergeSort(arr, s, m);
        mergeSort(arr, m+1, e);
        int p1 = s;
        int p2 = m+1;
        while(p1<=m && p2<=e){
            if(1l*arr[p1] > 2l*arr[p2] ){
                count += (m-p1+1);
                p2+=1;
                p1 = s;
            } else {
                p1+=1;
            }
            
        }
        merge(arr, s, m, e);
    }

    public void merge(int[] arr, int s, int m, int e){

        int res[] = new int[e-s+1];
        int p1 = s;
        int p2 = m+1;

        int i=0;
        while(p1<=m && p2<=e){
            if(arr[p1] <= arr[p2]){
                res[i] = arr[p1];
                p1+=1;
            } else {
                res[i] = arr[p2];
                p2+=1;
            }
            i+=1;
        }

        while (p1<=m){
            res[i] = arr[p1];
            p1+=1;
            i+=1;
        }
        while(p2<=e){
            res[i] = arr[p2];
            p2+=1;
            i+=1;
        }

        for(int k=0; k<res.length; k++){
            arr[k+s] = res[k];
        }
    }
}
