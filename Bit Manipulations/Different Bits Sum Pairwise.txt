Different Bits Sum Pairwise

Problem Description
We define f(X, Y) as the number of different corresponding bits in the binary representation of X and Y.
For example, f(2, 7) = 2, since the binary representation of 2 and 7 are 010 and 111, respectively. The first and the third bit differ, so f(2, 7) = 2.
You are given an array of N positive integers, A1, A2,..., AN. Find sum of f(Ai, Aj) for all pairs (i, j) such that 1 ≤ i, j ≤ N. Return the answer modulo 109+7.

Problem Constraints
1 <= N <= 105
1 <= A[i] <= 231 - 1

Input Format
The first and only argument of input contains a single integer array A.

Output Format
Return a single integer denoting the sum.

Example Input
Input 1:
 A = [1, 3, 5]
Input 2:
 A = [2, 3]

Example Output
Ouptut 1:
 8
Output 2:
 2

Example Explanation
Explanation 1:

 f(1, 1) + f(1, 3) + f(1, 5) + f(3, 1) + f(3, 3) + f(3, 5) + f(5, 1) + f(5, 3) + f(5, 5) 
 = 0 + 1 + 1 + 1 + 0 + 2 + 1 + 2 + 0 = 8
Explanation 2:

 f(2, 2) + f(2, 3) + f(3, 2) + f(3, 3) = 0 + 1 + 1 + 0 = 2
 
 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 public class Solution {
    public int cntBits(int[] A) {
        
        /* 
        Approach:
        We need to find the no. of setbits & unsetBits for each bit
        Eg, for 3 numbers, for ith bit there are 2 setbits & 1 unsetBit. 
        this means that 2 numbers differ with one number, so the ans for
        that bit would be 2*1. 
        Similarly find all the differ values like this
        and finally multiply with 2 since we need all the pairs of i&j
        */
        long N = A.length;
        long ans = 0;
        long mod = 1000000007;

        for(int i=0; i<32; i++){

            long setBits = 0;
            for(int j=0; j<N; j++){

                if((A[j] & (1<<i)) != 0){
                    setBits +=1;
                }

            }
            long unsetBits = N-setBits;
            ans = ans + (setBits*unsetBits*2)%mod;
        }

        return (int) (ans%mod);
    }
}
