SUBARRAY OR

You are given an array of integers A of size N.
The value of a subarray is defined as BITWISE OR of all elements in it.
Return the sum of value of all subarrays of A % 109 + 7.

Problem Constraints
1 <= N <= 105
1 <= A[i] <= 108



Input Format
The first argument given is the integer array A.


Output Format
Return the sum of Value of all subarrays of A % 109 + 7.



Example Input
Input 1:
 A = [1, 2, 3, 4, 5]
Input 2:
 A = [7, 8, 9, 10]


Example Output
Output 1:
 71
Output 2:
 110


Example Explanation
Explanation 1:

 Value([1]) = 1
 Value([1, 2]) = 3
 Value([1, 2, 3]) = 3
 Value([1, 2, 3, 4]) = 7
 Value([1, 2, 3, 4, 5]) = 7
 Value([2]) = 2
 Value([2, 3]) = 3
 Value([2, 3, 4]) = 7
 Value([2, 3, 4, 5]) = 7
 Value([3]) = 3
 Value([3, 4]) = 7
 Value([3, 4, 5]) = 7
 Value([4]) = 4
 Value([4, 5]) = 5
 Value([5]) = 5
 Sum of all these values = 71
Explanation 2:

 Sum of value of all subarray is 110.
 
 
 
 

++++++++++++++++++++++++++++++++++++++++++++++++++++++
public class Solution {
    public int solve(int[] A) {

        long N = A.length;
        long ans = 0;
        long mod = 1000000007;
        long totalSubs = N*(N+1)/2;

        for(int i=0; i<32; i++){

            long zeroSubs = 0;
            long zeroes = 0;
            for(int j=0; j<N; j++){
 
                if((A[j] &(1<<i)) == 0){ //when we encounter 0, we are considering the count
                    zeroes += 1;
                } else {
                    if(zeroes>0){ //when the bit is 1 for an element, we check the previous zeroes & calculate the no.of subarrays they can form
                        zeroSubs += (zeroes*(zeroes+1))/2;
                        zeroes = 0;
                    }
                }
            }
            if(zeroes>0){
                zeroSubs += (zeroes*(zeroes+1))/2;
            }
            // the ans will be the total subarrays - the no of subarrays which 0bit is coming into
            ans = ans + (totalSubs-zeroSubs)*(1<<i);
        }

        return (int) (ans%mod);
    }
}
